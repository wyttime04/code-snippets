{
	// Place your art_frontend 工作區 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	"Import Action": {
		"scope": "javascript,typescript",
		"prefix": "imaction",
		"body": [
			"import action from '${RELATIVE_FILEPATH/(?:(src\\\\app\\\\actions)*\\\\)([^\\\\^.]*)(?:[^\\\\]*)/..\\\//gi}lib/createAction'",
			"$0",
		],
		"description": "Define Single Action Type"
	},
	"Single Action Type": {
		"scope": "javascript,typescript",
		"prefix": "rdxaction",
		"body": [
			"export const ${1/(.*)/${1:/upcase}/} = '${1/(.*)/${1:/upcase}/}'",
			"/**",
			" * ${3:desc}",
			" * @param {${4:string}} ${5:param1} ${6:參數}",
			" */",
			"export const ${1:action_name} = data => action(${1/(.*)/${1:/upcase}/}, data)",
			"",
		],
		"description": "Define Single Action Type"
	},
	"index Reducer": {
		"scope": "javascript,typescript",
		"prefix": "rdxrdindex",
		"body": [
			"import { combineReducers } from 'redux'",
			"",
			"import ${1:reducer} from './${1:reducer}'",
			"",
			"export default combineReducers({",
			"\t${1:reducer}",
			"})",
		]
	},
	"Base Reducer": {
		"scope": "javascript,typescript",
		"prefix": "rdxreducer",
		"body": [
			"import * as actions from '${RELATIVE_FILEPATH/(?:(src\\\\app\\\\reducers)*\\\\)([^\\\\^.]*)(?:[^\\\\]*)/..\\\//gi}actions'",
			"",
			"const init = {",
			"\tdata: {},",
			"\tisFetching: false,",
			"\terrmsg: '',",
			"}",
			"",
			"export default function (",
			"\tstate = init, action) {",
			"\tswitch (action.type) {",
			"\t\t// INIT_DATA",
			"\t\tcase actions[`INIT_DATA`]:",
			"\t\t\treturn init",
			"\t",
			"\t\tdefault:",
			"\t\t\treturn state",
			"\t}",
			"}"
		],
		"description": "Define Reducer"
	},
	"Single Case Reducer": {
		"scope": "javascript,typescript",
		"prefix": "rdxrdcase",
		"body": [
			"// ${1:ACTION_NAME}",
			"case actions[`${1:ACTION_NAME}`]:",
			"\treturn {",
			"\t\t...state,",
			"\t}",
			"$0"
		],
		"description": "Define Single Case Reducer"
	},
	"Container": {
		"scope": "javascript,typescript,javascriptreact",
		"prefix": "rdxcontainer",
		"body": [
			"import { connect } from 'react-redux'",
			"import ${TM_FILENAME_BASE} from 'components${RELATIVE_FILEPATH/(?:(src\\\\app\\\\containers)*\\\\)([^\\\\^.]*)(?:[^\\\\]*)/\\\/$2/gi}'",
			"import {",
			"\t${2:action_name}",
			"} from '${RELATIVE_FILEPATH/(?:(src\\\\app\\\\containers)*\\\\)([^\\\\^.]*)(?:[^\\\\]*)/..\\\//gi}actions'",
			"",
			"",
			"const mapStateToProps = (state) => {",
			"\tconst { ${4:account} } = state.${3:user}",
			"\treturn {",
			"\t\t${4:account},",
			"\t}",
			"}",
			"",
			"const mapDispatchToProps = {",
			"\t${2:action_name}",
			"}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${TM_FILENAME_BASE})",
		],
		"description": "Define Container"
	}
}